{"version":3,"sources":["logo.svg","difficulty.svg","oh.svg","ex.svg","Header.js","Cell.js","helper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","src","logo","alt","target","rel","href","onClick","toggleDifficulty","difficultyImg","style","transform","difficulty","resetGame","Cell","background","value","oh","ex","winningPeice","winningAlignment","insert","index","backgroundImage","boardHelper","this","max_depth","nodes_map","Map","board","every","x","moves","forEach","i","push","isEmpty","winner","direction","row","pieces","isFull","maximizing","callback","depth","clear","isTerminal","best","getAvailableMoves","child","node_value","getBestMove","Math","max","has","get","set","ret","arr","split","floor","random","length","min","initialState","winningPeices","cells","isPlaying","turn","App","React","useState","state","setState","bHelper","newCells","prevState","updateObj","useEffect","window","setTimeout","enemyGo","newDifficulty","map","cell","key","indexOf","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24fd9b34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.dc5f7755.svg\";","module.exports = __webpack_public_path__ + \"static/media/difficulty.36944054.svg\";","module.exports = __webpack_public_path__ + \"static/media/oh.b3a20427.svg\";","module.exports = __webpack_public_path__ + \"static/media/ex.f7d7481d.svg\";","import React from \"react\";\r\n\r\nimport logo from \"./logo.svg\";\r\nimport difficultyImg from \"./difficulty.svg\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <header>\r\n      <div className=\"app-info\">\r\n        <img className=\"logo\" src={logo} alt=\"Minimax Tic Tac Toe logo\"></img>\r\n        <div className=\"header-text\">\r\n          <p className=\"title\">Tic Tac Toe</p>\r\n          <a\r\n            target=\"_blank\"\r\n            className=\"credit\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://github.com/victoriousj\"\r\n          >\r\n            <p>by victor d. johnson</p>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <div className=\"header-buttons\">\r\n        <button\r\n          onClick={() => props.toggleDifficulty()}\r\n          className=\"difficulty-button\"\r\n        >\r\n          <img\r\n            src={difficultyImg}\r\n            style={{\r\n              transform: `translateX(${props.difficulty ? \"-\" : \"\"}24px)`\r\n            }}\r\n            alt=\"difficulty\"\r\n          />\r\n        </button>\r\n        <button onClick={() => props.resetGame()} className=\"reset-button\">\r\n          reset â†º\r\n        </button>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nimport oh from \"./oh.svg\";\r\nimport ex from \"./ex.svg\";\r\n\r\nfunction Cell(props) {\r\n  const background = props.value === 0 ? \"\" : props.value === 2 ? oh : ex;\r\n\r\n  return (\r\n    <div\r\n      className={`cell ${props.winningPeice ? props.winningAlignment : \"\"}`}\r\n      onClick={() => props.insert(props.index)}\r\n    >\r\n      <span\r\n        style={{ backgroundImage: `url(${background})` }}\r\n        className={`${props.value === 2 ? \"oh\" : \"ex\"}`}\r\n      ></span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cell;\r\n","export const initialBoard = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\nexport class boardHelper {\r\n  constructor(difficulty = 0) {\r\n    this.max_depth = difficulty ? 2 : 6;\r\n    this.nodes_map = new Map();\r\n  }\r\n\r\n  isEmpty(board) {\r\n    return board.every(x => !x);\r\n  }\r\n\r\n  isFull(board) {\r\n    return board.every(x => x);\r\n  }\r\n\r\n  getAvailableMoves(board) {\r\n    const moves = [];\r\n    board.forEach((x, i) => {\r\n      if (!x) moves.push(i);\r\n    });\r\n    return moves;\r\n  }\r\n\r\n  isTerminal(board) {\r\n    if (this.isEmpty(board)) return false;\r\n\r\n    if (board[0] === board[1] && board[0] === board[2] && board[0]) {\r\n      return { winner: board[0], direction: \"H\", row: 1, pieces: [0, 1, 2] };\r\n    }\r\n    if (board[3] === board[4] && board[3] === board[5] && board[3]) {\r\n      return { winner: board[3], direction: \"H\", row: 2, pieces: [3, 4, 5] };\r\n    }\r\n    if (board[6] === board[7] && board[6] === board[8] && board[6]) {\r\n      return { winner: board[6], direction: \"H\", row: 3, pieces: [6, 7, 8] };\r\n    }\r\n    //Checking Vertical Wins\r\n    if (board[0] === board[3] && board[0] === board[6] && board[0]) {\r\n      return { winner: board[0], direction: \"V\", row: 1, pieces: [0, 3, 6] };\r\n    }\r\n    if (board[1] === board[4] && board[1] === board[7] && board[1]) {\r\n      return { winner: board[1], direction: \"V\", row: 2, pieces: [1, 4, 7] };\r\n    }\r\n    if (board[2] === board[5] && board[2] === board[8] && board[2]) {\r\n      return { winner: board[2], direction: \"V\", row: 3, pieces: [2, 5, 8] };\r\n    }\r\n    //Checking Diagonal Wins\r\n    if (board[0] === board[4] && board[0] === board[8] && board[0]) {\r\n      return { winner: board[0], direction: \"DL\", row: 1, pieces: [0, 4, 8] };\r\n    }\r\n    if (board[2] === board[4] && board[2] === board[6] && board[2]) {\r\n      return { winner: board[2], direction: \"DR\", row: 2, pieces: [2, 4, 6] };\r\n    }\r\n    //If no winner but the board is full, then it's a draw\r\n    if (this.isFull(board)) return { winner: \"draw\", pieces: [] };\r\n\r\n    //return false otherwise\r\n    return false;\r\n  }\r\n\r\n  getBestMove(board, maximizing = true, callback = () => {}, depth = 0) {\r\n    if (depth === 0) this.nodes_map.clear();\r\n    if (this.isTerminal(board) || depth === this.max_depth) {\r\n      if (this.isTerminal(board).winner === 1) {\r\n        return 100 - depth;\r\n      } else if (this.isTerminal(board).winner === 2) {\r\n        return -100 + depth;\r\n      }\r\n      return 0;\r\n    }\r\n    //Current player is maximizing\r\n    if (maximizing) {\r\n      //Initializ best to the lowest possible value\r\n      let best = -100;\r\n      //Loop through all empty cells\r\n      this.getAvailableMoves(board).forEach(index => {\r\n        //Initialize a new board with the current state without modifying the original)\r\n        let child = [...board];\r\n        //Create a child node by inserting the maximizing symbol 1 into the current empty cell\r\n        child[index] = 1;\r\n        //Recursively calling getBestMove this time with the new board and minimizing turn and incrementing the depth\r\n        let node_value = this.getBestMove(child, false, callback, depth + 1);\r\n        //Updating best value\r\n        best = Math.max(best, node_value);\r\n\r\n        //If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\r\n        if (depth === 0) {\r\n          //Comma seperated indicies if multiple moves have the same heuristic value\r\n          var moves = this.nodes_map.has(node_value)\r\n            ? `${this.nodes_map.get(node_value)},${index}`\r\n            : index;\r\n          this.nodes_map.set(node_value, moves);\r\n        }\r\n      });\r\n      //If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\r\n      if (depth === 0) {\r\n        if (typeof this.nodes_map.get(best) === \"string\") {\r\n          var arr = this.nodes_map.get(best).split(\",\");\r\n          var rand = Math.floor(Math.random() * arr.length);\r\n          var ret = arr[rand];\r\n        } else {\r\n          ret = this.nodes_map.get(best);\r\n        }\r\n        //run a callback after calculation and return the index\r\n        callback(ret);\r\n        return ret;\r\n      }\r\n      //If not main call (recursive) return the heuristic value for next calculation\r\n      return best;\r\n    }\r\n    if (!maximizing) {\r\n      //Initialize best to the highest possible value\r\n      let best = 100;\r\n      //Loop through all empty cells\r\n      this.getAvailableMoves(board).forEach(index => {\r\n        //Initialize a new board with the current state without modifying the original)\r\n        let child = [...board];\r\n        //Create a child node by inserting the minimizing symbol 2 into the current emoty cell\r\n        child[index] = 2;\r\n\r\n        //Recursively calling getBestMove this time with the new board and maximizing turn and incrementing the depth\r\n        let node_value = this.getBestMove(child, true, callback, depth + 1);\r\n        //Updating best value\r\n        best = Math.min(best, node_value);\r\n\r\n        //If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\r\n        if (depth === 0) {\r\n          //Comma seperated indicies if multiple moves have the same heuristic value\r\n          var moves = this.nodes_map.has(node_value)\r\n            ? this.nodes_map.get(node_value) + \",\" + index\r\n            : index;\r\n          this.nodes_map.set(node_value, moves);\r\n        }\r\n      });\r\n      //If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\r\n      if (depth === 0) {\r\n        if (typeof this.nodes_map.get(best) === \"string\") {\r\n          var arr = this.nodes_map.get(best).split(\",\");\r\n          var rand = Math.floor(Math.random() * arr.length);\r\n          var ret = arr[rand];\r\n        } else {\r\n          ret = this.nodes_map.get(best);\r\n        }\r\n        //run a callback after calculation and return the index\r\n        callback(ret);\r\n        return ret;\r\n      }\r\n      //If not main call (recursive) return the heuristic value for next calculation\r\n      return best;\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport Header from \"./Header\";\nimport Cell from \"./Cell\";\n\nimport { initialBoard, boardHelper } from \"./helper\";\nimport \"./App.css\";\n\nfunction App() {\n  const [state, setState] = React.useState({ ...initialState });\n  const bHelper = new boardHelper();\n\n  function insert(i) {\n    let newCells = [...state.cells];\n    if (newCells[i] !== 0 || !state.isPlaying) return;\n\n    newCells[i] = state.turn + 1;\n    setState(prevState => ({\n      ...prevState,\n      cells: newCells,\n      turn: (state.turn + 1) % 2\n    }));\n\n    const updateObj = bHelper.isTerminal(newCells);\n    if (updateObj) {\n      setState(prevState => ({\n        ...prevState,\n        winningAlignment: updateObj.direction,\n        winningPeices: updateObj.pieces,\n        winner: updateObj.winner,\n        isPlaying: false\n      }));\n    }\n  }\n  React.useEffect(() => {\n    if (state.turn === 1) {\n      window.setTimeout(() => enemyGo(state.cells), 200);\n    }\n  });\n\n  function enemyGo(newCells) {\n    const bHelper = new boardHelper(state.difficulty);\n    let i = bHelper.getBestMove(newCells, false);\n    if (newCells[i] !== 0 || !state.isPlaying) return;\n\n    newCells[i] = state.turn + 1;\n    setState(prevState => ({\n      ...prevState,\n      cells: newCells,\n      turn: (state.turn + 1) % 2\n    }));\n\n    const updateObj = bHelper.isTerminal(newCells);\n    if (updateObj) {\n      setState(prevState => ({\n        ...prevState,\n        winningAlignment: updateObj.direction,\n        winningPeices: updateObj.pieces,\n        winner: updateObj.winner,\n        isPlaying: false\n      }));\n    }\n  }\n\n  function resetGame() {\n    setState(prevState => ({\n      ...initialState,\n      difficulty: prevState.difficulty\n    }));\n  }\n\n  function toggleDifficulty() {\n    const newDifficulty = (state.difficulty + 1) % 2;\n    setState(prevState => ({ ...prevState, difficulty: newDifficulty }));\n  }\n\n  return (\n    <div>\n      <Header\n        resetGame={resetGame}\n        toggleDifficulty={toggleDifficulty}\n        difficulty={state.difficulty}\n      />\n      <div className={`board ${state.isPlaying ? \"active\" : \"\"}`}>\n        {state.cells.map((cell, i) => (\n          <Cell\n            key={i}\n            index={i}\n            value={cell}\n            insert={insert}\n            winningAlignment={state.winningAlignment}\n            winningPeice={state.winningPeices.indexOf(i) >= 0}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nconst initialState = {\n  winningAlignment: \"\",\n  winningPeices: [],\n  cells: initialBoard,\n  isPlaying: true,\n  difficulty: 0,\n  winner: \"\",\n  turn: 0\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}