{"version":3,"sources":["logo.svg","Header.js","Cell.js","helper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","src","logo","alt","target","rel","href","onClick","resetGame","Cell","character","value","winningPeice","winningAlignment","insert","index","getAvailableMoves","board","moves","forEach","x","i","push","isTerminal","every","isEmpty","winner","direction","row","pieces","isFull","nodes_map","Map","max_depth","initialState","winningPeices","cells","isPlaying","turn","App","React","useState","state","setState","newCells","prevState","updateObj","useEffect","window","setTimeout","getBestMove","maximizing","callback","depth","clear","best","child","node_value","Math","max","has","get","set","ret","arr","split","floor","random","length","min","enemyGo","map","cell","key","indexOf","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62f30aa2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6462638f.svg\";","import React from \"react\";\r\n\r\nimport logo from \"./logo.svg\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <header>\r\n      <div className=\"app-info\">\r\n        <img className=\"logo\" src={logo} alt=\"Minimax Tic Tac Toe logo\"></img>\r\n        <div className=\"header-text\">\r\n          <p className=\"title\">Tic Tac Toe</p>\r\n          <a\r\n            target=\"_blank\"\r\n            className=\"credit\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://github.com/victoriousj\"\r\n          >\r\n            <p>by victor d. johnson</p>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <button onClick={() => props.resetGame()} className=\"reset-button\">\r\n          reset ↺\r\n        </button>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Cell(props) {\r\n  const character = props.value === 0 ? \"\" : props.value === 2 ? \"○\" : \"×\";\r\n  return (\r\n    <div\r\n      className={`cell ${props.winningPeice ? props.winningAlignment : \"\"}`}\r\n      onClick={() => props.insert(props.index, true)}\r\n    >\r\n      <span className={`${props.value === 2 ? \"oh\" : \"ex\"}`}>{character}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cell;\r\n","export const initialBoard = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\nfunction isEmpty(board) {\r\n  return board.every(x => !x);\r\n}\r\n\r\nfunction isFull(board) {\r\n  return board.every(x => x);\r\n}\r\n\r\nexport function getAvailableMoves(board) {\r\n  const moves = [];\r\n  board.forEach((x, i) => {\r\n    if (!x) moves.push(i);\r\n  });\r\n  return moves;\r\n}\r\n\r\nexport function isTerminal(board) {\r\n  if (isEmpty(board)) return false;\r\n\r\n  if (board[0] === board[1] && board[0] === board[2] && board[0]) {\r\n    return { winner: board[0], direction: \"H\", row: 1, pieces: [0, 1, 2] };\r\n  }\r\n  if (board[3] === board[4] && board[3] === board[5] && board[3]) {\r\n    return { winner: board[3], direction: \"H\", row: 2, pieces: [3, 4, 5] };\r\n  }\r\n  if (board[6] === board[7] && board[6] === board[8] && board[6]) {\r\n    return { winner: board[6], direction: \"H\", row: 3, pieces: [6, 7, 8] };\r\n  }\r\n  //Checking Vertical Wins\r\n  if (board[0] === board[3] && board[0] === board[6] && board[0]) {\r\n    return { winner: board[0], direction: \"V\", row: 1, pieces: [0, 3, 6] };\r\n  }\r\n  if (board[1] === board[4] && board[1] === board[7] && board[1]) {\r\n    return { winner: board[1], direction: \"V\", row: 2, pieces: [1, 4, 7] };\r\n  }\r\n  if (board[2] === board[5] && board[2] === board[8] && board[2]) {\r\n    return { winner: board[2], direction: \"V\", row: 3, pieces: [2, 5, 8] };\r\n  }\r\n  //Checking Diagonal Wins\r\n  if (board[0] === board[4] && board[0] === board[8] && board[0]) {\r\n    return { winner: board[0], direction: \"DL\", row: 1, pieces: [0, 4, 8] };\r\n  }\r\n  if (board[2] === board[4] && board[2] === board[6] && board[2]) {\r\n    return { winner: board[2], direction: \"DR\", row: 2, pieces: [2, 4, 6] };\r\n  }\r\n  //If no winner but the board is full, then it's a draw\r\n  if (isFull(board)) return { winner: \"draw\", pieces: [] };\r\n\r\n  //return false otherwise\r\n  return false;\r\n}\r\n\r\nlet nodes_map = new Map();\r\nlet max_depth = 6;\r\n\r\nexport function getBestMove(\r\n  board,\r\n  maximizing = true,\r\n  callback = () => {},\r\n  depth = 0\r\n) {\r\n  if (depth === 0) nodes_map.clear();\r\n  if (isTerminal(board) || depth === max_depth) {\r\n    if (isTerminal(board).winner === 1) {\r\n      return 100 - depth;\r\n    } else if (isTerminal(board).winner === 2) {\r\n      return -100 + depth;\r\n    }\r\n    return 0;\r\n  }\r\n  //Current player is maximizing\r\n  if (maximizing) {\r\n    //Initializ best to the lowest possible value\r\n    let best = -100;\r\n    //Loop through all empty cells\r\n    getAvailableMoves(board).forEach(index => {\r\n      //Initialize a new board with the current state (slice() is used to create a new array and not modify the original)\r\n      let child = [...board];\r\n      //Create a child node by inserting the maximizing symbol x into the current empty cell\r\n      child[index] = 1;\r\n      //Recursively calling getBestMove this time with the new board and minimizing turn and incrementing the depth\r\n      let node_value = getBestMove(child, false, callback, depth + 1);\r\n      //Updating best value\r\n      best = Math.max(best, node_value);\r\n\r\n      //If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\r\n      if (depth === 0) {\r\n        //Comma seperated indicies if multiple moves have the same heuristic value\r\n        var moves = nodes_map.has(node_value)\r\n          ? `${nodes_map.get(node_value)},${index}`\r\n          : index;\r\n        nodes_map.set(node_value, moves);\r\n      }\r\n    });\r\n    //If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\r\n    if (depth === 0) {\r\n      if (typeof nodes_map.get(best) === \"string\") {\r\n        var arr = nodes_map.get(best).split(\",\");\r\n        var rand = Math.floor(Math.random() * arr.length);\r\n        var ret = arr[rand];\r\n      } else {\r\n        ret = nodes_map.get(best);\r\n      }\r\n      //run a callback after calculation and return the index\r\n      callback(ret);\r\n      return ret;\r\n    }\r\n    //If not main call (recursive) return the heuristic value for next calculation\r\n    return best;\r\n  }\r\n  if (!maximizing) {\r\n    //Initializ best to the highest possible value\r\n    let best = 100;\r\n    //Loop through all empty cells\r\n    getAvailableMoves(board).forEach(index => {\r\n      //Initialize a new board with the current state (slice() is used to create a new array and not modify the original)\r\n      let child = [...board];\r\n      //Create a child node by inserting the minimizing symbol o into the current emoty cell\r\n      child[index] = 2;\r\n\r\n      //Recursively calling getBestMove this time with the new board and maximizing turn and incrementing the depth\r\n      let node_value = getBestMove(child, true, callback, depth + 1);\r\n      //Updating best value\r\n      best = Math.min(best, node_value);\r\n\r\n      //If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\r\n      if (depth === 0) {\r\n        //Comma seperated indicies if multiple moves have the same heuristic value\r\n        var moves = nodes_map.has(node_value)\r\n          ? nodes_map.get(node_value) + \",\" + index\r\n          : index;\r\n        nodes_map.set(node_value, moves);\r\n      }\r\n    });\r\n    //If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\r\n    if (depth === 0) {\r\n      if (typeof nodes_map.get(best) === \"string\") {\r\n        var arr = nodes_map.get(best).split(\",\");\r\n        var rand = Math.floor(Math.random() * arr.length);\r\n        var ret = arr[rand];\r\n      } else {\r\n        ret = nodes_map.get(best);\r\n      }\r\n      //run a callback after calculation and return the index\r\n      callback(ret);\r\n      return ret;\r\n    }\r\n    //If not main call (recursive) return the heuristic value for next calculation\r\n    return best;\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport Header from \"./Header\";\nimport Cell from \"./Cell\";\n\nimport { initialBoard, isTerminal, getBestMove } from \"./helper\";\nimport \"./App.css\";\n\nfunction App() {\n  const [state, setState] = React.useState({ ...initialState });\n\n  function insert(i) {\n    let newCells = [...state.cells];\n    if (newCells[i] !== 0 || !state.isPlaying) return;\n\n    newCells[i] = state.turn + 1;\n    setState(prevState => ({\n      ...prevState,\n      cells: newCells,\n      turn: (state.turn + 1) % 2\n    }));\n\n    const updateObj = isTerminal(newCells);\n    if (updateObj) {\n      setState(prevState => ({\n        ...prevState,\n        winningAlignment: updateObj.direction,\n        winningPeices: updateObj.pieces,\n        winner: updateObj.winner,\n        isPlaying: false\n      }));\n    }\n  }\n  React.useEffect(() => {\n    if (state.turn === 1) {\n      window.setTimeout(() => enemyGo(state.cells), 200);\n    }\n  });\n\n  function enemyGo(newCells) {\n    let i = getBestMove(newCells, false);\n    if (newCells[i] !== 0 || !state.isPlaying) return;\n\n    newCells[i] = state.turn + 1;\n    setState(prevState => ({\n      ...prevState,\n      cells: newCells,\n      turn: (state.turn + 1) % 2\n    }));\n\n    const updateObj = isTerminal(newCells);\n    if (updateObj) {\n      setState(prevState => ({\n        ...prevState,\n        winningAlignment: updateObj.direction,\n        winningPeices: updateObj.pieces,\n        winner: updateObj.winner,\n        isPlaying: false\n      }));\n    }\n  }\n\n  function resetGame() {\n    setState({ ...initialState });\n  }\n\n  return (\n    <div>\n      <Header resetGame={resetGame} />\n      <div className={`board ${state.isPlaying ? \"active\" : \"\"}`}>\n        {state.cells.map((cell, i) => (\n          <Cell\n            key={i}\n            index={i}\n            value={cell}\n            insert={insert}\n            winningAlignment={state.winningAlignment}\n            winningPeice={state.winningPeices.indexOf(i) >= 0}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nconst initialState = {\n  winningAlignment: \"\",\n  winningPeices: [],\n  cells: initialBoard,\n  isPlaying: true,\n  winner: \"\",\n  turn: 0\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}